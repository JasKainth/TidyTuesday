scale_x_continuous(breaks = c(0.5, 1, 2, 3),
labels = c("0.5X", "1X", "2X", "3X"))
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, odds, state_name)) %>%
ggplot(aes(x = odds, y = category, color = state_name)) +
geom_segment(aes(x = 1, xend = odds, y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
scale_x_continuous(breaks = c(0.5, 1, 2, 3),
labels = c("0.5X", "1X", "2X", "3X"))
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, odds, state_name)) %>%
ggplot(aes(x = odds, y = category, color = state_name)) +
geom_segment(aes(x = 1, xend = odds, y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_classic() +
theme(legend.position = "none") +
scale_color_lancet() +
scale_x_continuous(breaks = c(0.5, 1, 2, 3),
labels = c("0.5X", "1X", "2X", "3X"))
odds
odds <- beer_top_9 %>%
filter(category %in% top_categories) %>%
count(state_name, category) %>%
# Fill in the missing data (if states have 0)
complete(state_name, category, fill = list(n = 0)) %>%
bind_log_odds(set = state_name, feature = category, n = n) %>%
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, odds, state_name)) %>%
ggplot(aes(x = odds, y = category, color = state_name)) +
geom_segment(aes(x = 1, xend = odds, y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
scale_x_continuous(breaks = c(0.5, 1, 2, 3),
labels = c("0.5X", "1X", "2X", "3X"))
odds <- beer_top_9 %>%
filter(category %in% top_categories) %>%
count(state_name, category) %>%
# Fill in the missing data (if states have 0)
complete(state_name, category, fill = list(n = 0)) %>%
bind_log_odds(set = state_name, feature = category, n = n) %>%
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, odds, state_name)) %>%
ggplot(aes(x = odds, y = category, color = state_name)) +
geom_segment(aes(x = 1, xend = odds, y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
scale_x_continuous(breaks = c(0.5, 1, 2, 3),
labels = c("0.5X", "1X", "2X", "3X"))
odds <- beer_top_9 %>%
filter(category %in% top_categories) %>%
count(state_name, category) %>%
# Fill in the missing data (if states have 0)
complete(state_name, category, fill = list(n = 0)) %>%
bind_log_odds(set = state_name, feature = category, n = n)
odds
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, log_odds_weighted, state_name)) %>%
ggplot(aes(x = log_odds_weighted, y = category, color = state_name)) +
geom_segment(aes(x = 1, xend = odds, y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
labs(title = "Which categories are under/over represented in each state?",
x = "Log-Odds",
y = " ")
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, log_odds_weighted, state_name)) %>%
ggplot(aes(x = log_odds_weighted, y = category, color = state_name)) +
geom_segment(aes(x = 1, xend = log_odds_weighted,
y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
labs(title = "Which categories are under/over represented in each state?",
x = "Log-Odds",
y = " ")
odds %>%
# Make the category titles a bit shorter
mutate(category = str_trunc(category, 20)) %>%
mutate(category = reorder_within(category, log_odds_weighted, state_name)) %>%
ggplot(aes(x = log_odds_weighted, y = category, color = state_name)) +
geom_segment(aes(x = 0, xend = log_odds_weighted,
y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
labs(title = "Which categories are under/over represented in each state?",
x = "Log-Odds",
y = " ")
odds %>%
# Make the category titles a bit shorter
mutate(category = reorder_within(category, log_odds_weighted, state_name)) %>%
ggplot(aes(x = log_odds_weighted, y = category, color = state_name)) +
geom_segment(aes(x = 0, xend = log_odds_weighted,
y = category, yend = category)) +
geom_point() +
facet_wrap(~ state_name, scales = "free_y") +
scale_y_reordered() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_lancet() +
labs(title = "Which categories are under/over represented in each state?",
x = "Log-Odds",
y = " ")
setwd("~/github.com/jaskainth/TidyTuesday/datasauraus")
knitr::purl("script.R", documentation = 2)
knitr::purl("Datasaurus.Rmd", documentation = 2)
#'
## -------------------------------------------------------------------------------------
# Create a plot of all the datasets
# We will use patchworks, so we will add two plots (highlighting the dino plot)
# This is a personal choice to make the dino one bigger but creating it like this
# will allow us to get a nice matrix of plots
dinoPlot <- datasaurus %>%
filter(dataset == "dino") %>%
mutate(dataset = str_replace(dataset, "_", " "),
dataset = str_to_title(dataset)) %>%
ggplot(aes(x = x, y = y)) +
geom_point(color = "darkgreen") +
theme_void() +
facet_wrap(~ dataset)
#' ---
#' title: "Datasaurus"
#' author: "Jas Kainth"
#' date: "13/10/2020"
#' output: pdf_document
#' editor_options:
#'   chunk_output_type: console
#' ---
#'
## ----setup, include=FALSE-------------------------------------------------------------
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggsci)
library(ggthemes)
library(patchwork)
library(gtsummary)
library(gganimate)
tt <- tidytuesdayR::tt_load(2020, week = 42)
datasaurus <- tt$datasaurus
#'
## -------------------------------------------------------------------------------------
datasaurus %>%
count(dataset) # We have 13 different datasets
# Let's take a look at some key statistics of all of them
datasaurus %>%
group_by(dataset) %>%
summarise("Min x" = min(x),
"Min y" = min(y),
"1st Quartile x" = quantile(x, 0.25),
"1st Quartile y" = quantile(y, 0.25),
"Median x" = median(x),
"Median y" = median(y),
"Mean x" = mean(x),
"Mean y" = mean(y),
"3rd Quartile x" = quantile(x, 0.75),
"3rd Quartile y" = quantile(y, 0.75),
"Max x" = max(x),
"Max y" = max(y)) %>%
pivot_longer(cols = -dataset, names_to = "statistic", values_to = "value") %>%
mutate(dataset = str_replace(dataset, "_", " "),
dataset = str_to_title(dataset)) %>%
ggplot(aes(x = dataset, y = value, color = statistic)) +
geom_line(aes(group = statistic)) +
geom_point() +
facet_wrap(~ statistic) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +
scale_color_igv() +
labs(title = "Comparing statistics for each dataset",
y = " ",
x = "Dataset")
#'
## -------------------------------------------------------------------------------------
# Create a plot of all the datasets
# We will use patchworks, so we will add two plots (highlighting the dino plot)
# This is a personal choice to make the dino one bigger but creating it like this
# will allow us to get a nice matrix of plots
dinoPlot <- datasaurus %>%
filter(dataset == "dino") %>%
mutate(dataset = str_replace(dataset, "_", " "),
dataset = str_to_title(dataset)) %>%
ggplot(aes(x = x, y = y)) +
geom_point(color = "darkgreen") +
theme_void() +
facet_wrap(~ dataset)
otherPlot <- datasaurus %>%
filter(dataset != "dino") %>%
mutate(dataset = str_replace(dataset, "_", " "),
dataset = str_to_title(dataset)) %>%
ggplot(aes(x = x, y = y)) +
geom_point(aes(color = dataset)) +
theme_void() +
theme(legend.position = "none") +
scale_color_manual(values = pal_futurama("planetexpress")(12)) +
facet_wrap(~ dataset)
dinoPlot + otherPlot
ggsave("all_plots.jpg", units = "in", width = 10, height = 6, dpi = 1000)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Lahman)
library(ggsci)
library(stats4)
career <- career %>%
mutate(eb_average = (H + alpha) / (AB + alpha + beta))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Lahman)
library(ggsci)
library(stats4)
x <- seq(from = 0, to = 1, by = 0.001)
a1b1 <- dbeta(x, 1, 1)
a10b20 <- dbeta(x, 10, 20)
a40b8 <- dbeta(x, 40, 8)
a10b10 <- dbeta(x, 10, 10)
a102b289 <- dbeta(x, 102, 289)
tibble(x = x,
a1b1 = a1b1,
a10b20 = a10b20,
a10b10 = a10b10,
a40b8 = a40b8,
a102b289 = a102b289) %>%
pivot_longer(a1b1:a102b289,
names_to = "Parameters",
values_to = "Probability") %>%
ggplot(aes(x = x, y = Probability, color = Parameters)) +
geom_line() +
scale_color_manual(breaks = c("a1b1", "a10b10","a10b20", "a40b8", "a102b289"),
labels = c("a = 1, b = 1", "a = 10, b = 10",
"a = 10, b = 20", "a = 40, b = 8",
"a = 102, b = 289"),
values = c(pal_lancet("lanonc")(5))) +
theme_minimal() +
labs(x = "x",
y = "Probability Density")
# Remove pitchers
career <- Batting %>%
filter(AB > 0) %>%
anti_join(Pitching, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB)) %>%
mutate(average = H / AB)
# Get their names
career <- Master %>%
tbl_df() %>%
dplyr::select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID") %>%
dplyr::select(-playerID)
career_filtered <- career %>%
filter(AB > 500)
# Log-likelihood
ll <- function(alpha, beta) {
x <- career_filtered$H
total <- career_filtered$AB
-sum(VGAM::dbetabinom.ab(x, total, alpha, beta, log = TRUE))
}
# MLE
m <- mle(ll, start = list(alpha = 1, beta = 10), method = "L-BFGS-B",
lower = c(0.0001, .1))
alpha <- coef(m)[1]
beta <- coef(m)[2]
tibble(Parameter = c("Alpha", "Beta"),
Values = c(alpha, beta)) %>%
knitr::kable(caption = "Parameter values for the baseball model")
x <- seq(from = 0.2, to = 0.4, by = 0.001)
a102b289 <- dbeta(x, 102, 289)
beta_line <- tibble(x = x, y = a102b289)
career_filtered %>%
ggplot() +
geom_histogram(aes(x = average, y = ..density..),
color = "white", fill = "gray22",
bins = 40) +
theme_minimal() +
labs(x = "Batting Average",
y = "Density") +
geom_line(data = beta_line, aes(x = x, y = y), color = "darkred")
career <- career %>%
mutate(eb_average = (H + alpha) / (AB + alpha + beta))
# Add a posterior alpha and beta
# And credbile intervals
career <- career %>%
mutate(alpha1 = alpha + H,
beta1 = beta + AB - H,
cred.low = qbeta(0.025, alpha1, beta1),
cred.high = qbeta(0.975, alpha1, beta1))
bt_low <- function(a, b, p = 0.5) {
binom.test(a, b, 0.5, alternative = c("two.sided"), conf.level = 0.95) %>%
broom::tidy() %>%
select(conf.low)
}
bt_high <- function(a, b, p = 0.5) {
binom.test(a, b, 0.5, alternative = c("two.sided"), conf.level = 0.95) %>%
broom::tidy() %>%
select(conf.high)
}
players_for_interval <- c("Jesus de la Rosa", "Al Thake", "Eddie Kenna",
"Don White", "Wilbur Howard", "Sam Leslie",
"Jimmy Austin", "Hank Aaron", "Derek Jeter",
"Mike Heath", "Ben Grieve", "Bill Rariden",
"Carl Taylor", "Tommy O'Brien", "Cliff Aberson",
"Don Reynolds", "Jim Woods", "Reggie Smith",
"Darrell Evans", "Pete Rose")
filtered_career <- career %>%
filter(name %in% players_for_interval)
filtered_career$conf_low <- mapply(bt_low, filtered_career$H, filtered_career$AB)
filtered_career$conf_high <- mapply(bt_high, filtered_career$H, filtered_career$AB)
filtered_career <- filtered_career %>%
mutate(conf_low = as.numeric(conf_low),
conf_high = as.numeric(conf_high))
for_plot_bayes <- filtered_career %>%
filter(name %in% players_for_interval) %>%
select(name, H, AB, average = eb_average, low = cred.low, high = cred.high)
for_plot_freq <- filtered_career %>%
filter(name %in% players_for_interval) %>%
select(name, H, AB, average = average, low = conf_low, high = conf_high)
for_plot_bayes <- for_plot_bayes %>%
mutate(type = "Credible")
for_plot_freq <- for_plot_freq %>%
mutate(type = "Confidence")
for_plot <- union(for_plot_bayes, for_plot_freq)
for_plot %>%
mutate(name = glue::glue("{ name } ({ H }/{ AB })"),
name = fct_reorder(name, -AB)) %>%
ggplot(aes(y = name)) +
geom_errorbar(aes(xmin = low, xmax = high, color = type)) +
geom_point(aes(x = average, color = type)) +
scale_color_lancet() +
labs(color = " ",
x = "Batting Average",
y = "Player (H/AB)") +
theme_minimal()
?scale_color_material
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "blue",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "darkred", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "blue-grey",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "darkred", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "orange",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "darkred", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "darkorange",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "darkred", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "deep-orange",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "darkred", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "deep-orange",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "blue", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "deep-orange",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "green", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>%
mutate(adjusted_avg = (102 + H)/ (289 + 102 + AB)) %>%
ggplot(aes(x = average, y = adjusted_avg, color = AB)) +
geom_point() +
scale_color_material(palette = "deep-orange",
trans = "log10",
breaks = c(10, 100, 1000, 10000)) +
theme_minimal() +
labs(x = "Raw Batting Average",
y = "Adjusted Batting Averabe",
color = "At Bats") +
geom_abline(slope = 1, intercept = 0, color = "darkgreen", lty = 2) +
geom_hline(yintercept = (102/(102 + 289)), color = "black", lty = 2)
career %>% arrange(AB)
career %>% arrange(desc(AB))
players_for_interval <- c("Jesus de la Rosa", "Al Thake", "Eddie Kenna",
"Don White", "Wilbur Howard", "Sam Leslie",
"Jimmy Austin", "Hank Aaron", "Derek Jeter",
"Mike Heath", "Ben Grieve", "Bill Rariden",
"Carl Taylor", "Tommy O'Brien", "Cliff Aberson",
"Don Reynolds", "Jim Woods", "Reggie Smith",
"Darrell Evans", "Eddie Murray")
filtered_career <- career %>%
filter(name %in% players_for_interval)
filtered_career$conf_low <- mapply(bt_low, filtered_career$H, filtered_career$AB)
filtered_career$conf_high <- mapply(bt_high, filtered_career$H, filtered_career$AB)
filtered_career <- filtered_career %>%
mutate(conf_low = as.numeric(conf_low),
conf_high = as.numeric(conf_high))
for_plot_bayes <- filtered_career %>%
filter(name %in% players_for_interval) %>%
select(name, H, AB, average = eb_average, low = cred.low, high = cred.high)
for_plot_freq <- filtered_career %>%
filter(name %in% players_for_interval) %>%
select(name, H, AB, average = average, low = conf_low, high = conf_high)
for_plot_bayes <- for_plot_bayes %>%
mutate(type = "Credible")
for_plot_freq <- for_plot_freq %>%
mutate(type = "Confidence")
for_plot <- union(for_plot_bayes, for_plot_freq)
for_plot %>%
mutate(name = glue::glue("{ name } ({ H }/{ AB })"),
name = fct_reorder(name, -AB)) %>%
ggplot(aes(y = name)) +
geom_errorbar(aes(xmin = low, xmax = high, color = type)) +
geom_point(aes(x = average, color = type)) +
scale_color_lancet() +
labs(color = " ",
x = "Batting Average",
y = "Player (H/AB)") +
theme_minimal()
